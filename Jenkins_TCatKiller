#!/bin/bash
# cmerrill-mv 2015
# workaround pgrep from Jenkins UI showing extra pid
# Place in Jenkins remote execution window
#  Tomcat auto-start
#
# description: Auto-starts tomcat
# processname: tomcat
# pidfile: /var/run/tomcat.pid

export CATALINA_HOME=/mnt/tomcat
export CATALINA_OPTS=-Duser.timezone=UTC
export JAVA_HOME=/usr/local/java
export JSVC=/usr/bin/jsvc
export TOMCAT_USER=tomcat
export CATALINA_PID=/var/run/tomcat.pid

WAIT=$2

tomcat_pid() {
  echo `ps aux | grep java | grep tomcat | awk '{ print $2 }'`
}

start() {
  pid=$(tomcat_pid)
  if [[ -n "$pid" ]]; then
    echo "Tomcat is already running (pid: $pid)."
  else
    # check if file is empty in case tomcat got killed
   # if [[ -s "$CATALINA_PID" ]]; then
   #    echo "Clearing PID file."
  #     > $CATALINA_PID
 #   fi
    # Start tomcat
    echo "Starting tomcat."
    if ! sh $CATALINA_HOME/bin/daemon.sh start ; then
        echo "An error occurred while starting tomcat: it may be taking a longer than expected time to start up.  Check server logs for details"
        echo "Consider adjusting wait start with startup parameter. ex.: -wait 600"
        exit 1
    fi
    echo "Tomcat pids are ($(tomcat_pid))."
    echo "Tomcat started."
  fi
}


stop() {
  pid=$(tomcat_pid)
  if [[ -n "$pid" ]]; then
    echo "Stoping Tomcat"
    
    if ! sh $CATALINA_HOME/bin/daemon.sh stop ; then
       echo "An error occurred while stopping tomcat.  Check server logs for details"
       echo "Will try and kill Tomcat process."
       re='^[0-9]+$'
       if [[ -z "$WAIT" ]] && ! [[ $WAIT =~ $re ]]; then
         echo "Default wait for tomcat stop is 120 seconds. You can pass stop time in seconds as an argument. ex.: service tomcat stop 60 "
         SHUTDOWN_WAIT=120
       else
         SHUTDOWN_WAIT=$WAIT
         echo "Tomcat process will be killed in $SHUTDOWN_WAIT second."
       fi

       let kwait=$SHUTDOWN_WAIT
       count=0;
       increment=5;
       until [[ -z "$(tomcat_pid)" ]] || [[ $count -gt $kwait ]]
       do
         echo "Waiting for processes to exit for another $(( SHUTDOWN_WAIT-count )) seconds." ;
         sleep $increment
         let count=$count+$increment;
       done

       if [[ $count -gt $kwait ]]; then
         echo "Killing tomcat processes $pid which didn't stop after $SHUTDOWN_WAIT seconds."
         kill -9 $pid
         if [ $? -eq 0 ]; then
           echo "Tomcat stopped."
           # on slow systems wait for the process to drop the pids
           sleep 2
         else
          echo "Fatal: could not kill tomcat."
          exit 1
         fi
       fi
    fi
  else
    echo "Tomcat is not running."
  fi

  return 0
}

case $1 in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    if [[ -n "$(tomcat_pid)" ]]; then
      echo "Tomcat is running with pid: $(tomcat_pid)."
    else
      echo "Tomcat is not running"
    fi
  ;;
  *)
    echo $"Usage: $0 {start|stop|restart|status}"
  ;;
esac
exit 0

